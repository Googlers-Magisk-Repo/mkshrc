#!/system/bin/sh
# Copyright (c) 2010
#	Thorsten Glaser <t.glaser@tarent.de>
# This file is provided under the same terms as mksh.
#-
# Minimal /system/etc/mkshrc for Android

export TERMUX=/data/data/com.termux/files
export LD_LIBRARY_PATH=${TERMUX}/usr/lib
export SHELL=/data/data/com.termux/files/usr/bin/bash

: ${TERM:=xterm-256color} ${HOME:=/} ${MKSH:=/system/bin/sh} ${HOSTNAME:=android}
: ${SHELL:=$MKSH} ${USER:=$(getprop ro.product.device)}
if (( USER_ID )); then PS1='$'; else PS1='#'; fi

if [ $(id -u) = 0 ]
 then echo "You're now SuperUser, here some tools"
 echo "-flashOn              \t Turn on flashlight."
 echo "-flashOff	            \t Turn off flashlight."
 echo "-flashlight [0/1]     \t Turn flashlight on or off."
 echo "-flashbang [100]      \t Starts an flashbang, default is 100 (not supported by all devices)."
 echo "-sys[rw/ro]           \t Mounts system as Read-Write or Read-Only."
 echo "-devicefetch [distro] \t Displays neofetch (requires neofetch)."
fi

PS1='$(echo -e "\e[32m${USER}@${HOSTNAME}\033[m"):$(echo -e "\e[34m~${PWD:-?}\033[m") '"$PS1 "
if [ -d "/sbin/.magisk/busybox" ]; then
  BBDIR="/sbin/.magisk/busybox"
elif [ -d "/sbin/.core/busybox" ]; then
  BBDIR="/sbin/.core/busybox"
fi
PATH=${PATH}:/sbin:${BBDIR}:${TERMUX}/usr/bin:${TERMUX}/usr/bin/applets:${TERMUX}/home/.bin.
export TERM HOME MKSH HOSTNAME SHELL USER PATH
# Place your own aliases in <SDCARD>/.aliases for ease.

for p in ~/.bin; do
	[[ -d $p/. ]] || continue
	[[ :$PATH: = *:$p:* ]] || PATH=$p:$PATH
done

unset p

if [ -f "<SDCARD>/.aliases" ]; then
  . "<SDCARD>/.aliases"
fi

export host=android
export LOL="your mom"
export TMPDIR=/data/local/tmp

# Termux environment
export COLORTERM=truecolor
export HISTCONTROL=ignoreboth
export PREFIX=$TERMUX
export JAVA_HOME=${TERMUX}/usr/opt/openjdk
export TERMUX_IS_DEBUGGABLE_BUILD=0
export TERMUX_MAIN_PACKAGE_FORMAT=debian
export PWD=/
export TERMUX_VERSION=0.118.0
export EXTERNAL_STORAGE=/sdcard
export LD_PRELOAD=${TERMUX}/usr/lib/libtermux-exec.so
export LANG=en_US.UTF-8
export DEX2OATBOOTCLASSPATH=/apex/com.android.art/javalib/core-oj.jar:/apex/com.android.art/javalib/core-libart.jar:/apex/com.android.art/javalib/okhttp.jar:/apex/com.android.art/javalib/bouncycastle.jar:/apex/com.android.art/javalib/apache-xml.jar:/system/framework/framework.jar:/system/framework/framework-graphics.jar:/system/framework/ext.jar:/system/framework/telephony-common.jar:/system/framework/voip-common.jar:/system/framework/ims-common.jar:/apex/com.android.i18n/javalib/core-icu4j.jar
export ANDROID_DATA=/data
export ANDROID_I18N_ROOT=/apex/com.android.i18n
export SHLVL=1
export ANDROID_ROOT=/system
export BOOTCLASSPATH=/apex/com.android.art/javalib/core-oj.jar:/apex/com.android.art/javalib/core-libart.jar:/apex/com.android.art/javalib/okhttp.jar:/apex/com.android.art/javalib/bouncycastle.jar:/apex/com.android.art/javalib/apache-xml.jar:/system/framework/framework.jar:/system/framework/framework-graphics.jar:/system/framework/ext.jar:/system/framework/telephony-common.jar:/system/framework/voip-common.jar:/system/framework/ims-common.jar:/apex/com.android.i18n/javalib/core-icu4j.jar:/apex/com.android.appsearch/javalib/framework-appsearch.jar:/apex/com.android.conscrypt/javalib/conscrypt.jar:/apex/com.android.ipsec/javalib/android.net.ipsec.ike.jar:/apex/com.android.media/javalib/updatable-media.jar:/apex/com.android.mediaprovider/javalib/framework-mediaprovider.jar:/apex/com.android.os.statsd/javalib/framework-statsd.jar:/apex/com.android.permission/javalib/framework-permission.jar:/apex/com.android.permission/javalib/framework-permission-s.jar:/apex/com.android.scheduling/javalib/framework-scheduling.jar:/apex/com.android.sdkext/javalib/framework-sdkextensions.jar:/apex/com.android.tethering/javalib/framework-connectivity.jar:/apex/com.android.tethering/javalib/framework-tethering.jar:/apex/com.android.wifi/javalib/framework-wifi.jar
export ANDROID_TZDATA_ROOT=/apex/com.android.tzdata
export TERMUX_APP_PID=25811
export ANDROID_ART_ROOT=/apex/com.android.art
export _=${TERMUX}/usr/bin/printenv

alias bb='$BBDIR/busybox'
alias bsu='su -s bash'
alias l='bb ls --group-directories-first'
alias la='l -A'
alias ll='l -l'
alias lo='l -al'
alias ls='ls --color=auto'
alias nano='nano -l'
alias sudo='su -c "$@"'
alias sysro='mount -o remount,ro /'
alias sysrw='mount -o remount,rw /'
alias vd='cd'
alias flashOn='flashlight 1'
alias flashOff='flashlight 0'

flashlight() {
  toggle=$(cat /sys/class/leds/led:switch_0/brightness)
  if [ "$toggle" = "0" ];then
    echo 30 > /sys/class/leds/led:torch_0/brightness
    echo 30 > /sys/class/leds/led:torch_3/brightness
    echo 1 > /sys/class/leds/led:switch_0/brightness
    echo "on"
  else
    echo 0 > /sys/class/leds/led:torch_0/brightness
    echo 0 > /sys/class/leds/led:torch_3/brightness
    echo 0 > /sys/class/leds/led:switch_0/brightness
    echo "off"
  fi
}

flashbang() {
  i=1
  value=$@
  while [ $i -le ${value:=100} ]
    do
    flashlight 1
    flashlight 0
    i=$(($i+1))
  done
}

devicefetch() {
  neofetch --ascii_distro $@
}

rootcheck(){
  ROOT= && [ $USER = root ] || ROOT="su -c"
}

adbfi(){
  rootcheck
  case $1 in
    on) $ROOT setprop service.adb.tcp.port 5555
        $ROOT stop adbd
        $ROOT start adbd
        echo "ADB over WiFi enabled";;
    off) $ROOT setprop service.adb.tcp.port -1
         $ROOT stop adbd
         $ROOT start adbd
         echo "ADB over WiFi disabled";;
    stats) case `getprop service.adb.tcp.port` in -1) echo "off";; 5555) echo "on";; *) echo "off";; esac;;
    *) echo "Usage: adbfi [option]"
       echo " "
       echo "Options:"
       echo " on    - Enables ADB over Wifi"
       echo " off   - Disables ADB over WiFi"
       echo " stats - Gets current status";;
  esac
}

overlays(){
  opt=$1
  rootcheck
  [ "$2" ] || opt=null
  case $opt in
    enable) shift
            for i in $($ROOT cmd overlay list | grep -iE "^\[.*$1" | sed 's|\[.* ||g'); do $ROOT cmd overlay enable $i; done;;
    disable) shift
             for i in $($ROOT cmd overlay list | grep -iE "^\[.*$1" | sed 's|\[.* ||g'); do $ROOT cmd overlay disable $i; done;;
    list) shift
          overlayList=$($ROOT cmd overlay list | grep -iE "^\[.*$1")
          echo "$overlayList";;
    *) echo "Usage: overlays [option] (keyword)"
       echo " "
       echo "Options:"
       echo " enable  - Enables all overlays that include the keyword in the packagename"
       echo " disable - Disables all overlays that include the keyword in the packagename"
       echo " list    - Lists all overlays that include the keyword in the packagename";;
  esac
}
